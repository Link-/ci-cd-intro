name: Continuous Integration Workflow

# This workflow is triggered whenever a new PR is created on the main branch
on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash
    # Define the working directory for all run steps in the workflow
    working-directory: ./web

jobs:

  # Run unit tests to make sure everything is üëç
  test:
    name: 'Run unit tests'
    # Specify the OS we want the workflow to run on
    runs-on: ubuntu-latest
    # Define the steps for this job
    steps:
    
    - uses: actions/checkout@v2
      name: 'Checkout repository'

    - name: 'Install Dependencies'
      run: npm install
    
    - name: 'Run Tests'
      run: npm run test

  # Run the linter to check for code style issues
  lint:
    name: 'Run linter'
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
      name: 'Checkout repository'
    
    - name: 'Install Dependencies'
      run: npm install

    - name: 'Run Linter'
      run: npx standard -v
  
  # Deploy the current branch to staging
  deploy:
    environment: staging
    name: 'Deploy to staging'
    runs-on: ubuntu-latest
    # Requires the test and lint jobs to be completed successfully before
    # deploying
    needs: ['test', 'lint']
    steps:

    - uses: actions/checkout@v2
      name: 'Checkout repository'
    
    - uses: burnett01/rsync-deployments@23a557dceb19f9bb960ef40cf75cab5e9b37ec1f
      name: 'Deploy to staging'
      with:
        switches: -avzr --delete
        path: ./web
        remote_path: /var/app
        remote_host: ${{ secrets.HOSTNAME }}
        remote_user: ${{ secrets.REMOTE_USER }}
        remote_key: ${{ secrets.SSH_KEY }}
    
    - uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      name: Execute SSH commmands on remote server
      with:
        hosts: '${{ secrets.REMOTE_USER }}@${{ secrets.HOSTNAME }}'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          cd /var/app/web
          npm ci
          pm2 start /var/app/web/bin/www
          sudo service nginx restart
